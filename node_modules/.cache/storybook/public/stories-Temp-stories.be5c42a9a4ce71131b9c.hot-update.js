"use strict";
globalThis["webpackHotUpdatestorybook"]("stories-Temp-stories",{

/***/ "./src/components/Temp.jsx":
/*!*********************************!*\
  !*** ./src/components/Temp.jsx ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Temp)
/* harmony export */ });
Object(function webpackMissingModule() { var e = new Error("Cannot find module '경로'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");




function Temp({
  // 받아올 prop값들 객체형식으로 적기, 이곳에 값을 지정하면 스토리북에서 default값으로 지정이된다.
  // ex ) width = "100%" 하면 기본값은 100%로 설정 프롭값이 따로 들어오기전까진 100%로 사용됨. 
  // 프롭값을 받아 style객체에 넣고 return에서 스타일값을 인라인으로 넣어주면 적용됨

  // 예시 
  // component : 컴포넌트명, // 불러온 컴포넌트
  // title : '컴포넌트명', // 스토리북에서 사용될 컴포넌트 명
  // argTypes : {} // 타입 지정
}) {
  const style = {
    // 스타일 컴포넌트처럼 받아온 프롭들을 값 셋팅을 해준다.
    // width,
    // fontSize
  };
  return (
    /*#__PURE__*/
    // 예시코드
    // <button onClick={onClick} style={style} className={cls}>{label} </button>
    (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment, {}, void 0, false)
  );
}
_c = Temp;
Temp.propTypes = {
  // prop1 : PropTypes.string // 프롭타입.타입
};
Temp.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Temp"
};
var _c;
__webpack_require__.$Refresh$.register(_c, "Temp");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});