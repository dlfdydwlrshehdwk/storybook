"use strict";
globalThis["webpackHotUpdatestorybook"]("stories-Task-stories",{

/***/ "./src/components/Task.js":
/*!********************************!*\
  !*** ./src/components/Task.js ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Task)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* provided dependency */ var __react_refresh_utils__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/lib/runtime/RefreshUtils.js");
/* provided dependency */ var __react_refresh_error_overlay__ = __webpack_require__(/*! ./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js */ "./node_modules/@pmmmwh/react-refresh-webpack-plugin/overlay/index.js");
__webpack_require__.$Refresh$.runtime = __webpack_require__(/*! ./node_modules/react-refresh/runtime.js */ "./node_modules/react-refresh/runtime.js");

var _jsxFileName = "C:\\Users\\withere\\OneDrive\\\uBC14\uD0D5 \uD654\uBA74\\\uB0B4\uAE43\\storybook\\storybook\\src\\components\\Task.js";



function Task({
  task: {
    id,
    title,
    state
  },
  onArchiveTask,
  onPinTask
}) {
  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
    className: `list-item ${state}`,
    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("label", {
      className: "checkbox",
      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("input", {
        type: "checkbox",
        defaultChecked: state === 'TASK_ARCHIVED',
        disabled: true,
        name: "checked"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 8,
        columnNumber: 9
      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
        className: "checkbox-custom",
        onClick: () => onArchiveTask(id),
        id: `archiveTask-${id}`,
        "aria-label": `archiveTask-${id}`
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 14,
        columnNumber: 9
      }, this)]
    }, void 0, true, {
      fileName: _jsxFileName,
      lineNumber: 7,
      columnNumber: 7
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
      className: "title",
      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("input", {
        type: "text",
        value: title,
        readOnly: true,
        placeholder: "Input title"
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 22,
        columnNumber: 9
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 21,
      columnNumber: 7
    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("div", {
      className: "actions",
      onClick: event => event.stopPropagation(),
      children: state !== 'TASK_ARCHIVED' &&
      /*#__PURE__*/
      // eslint-disable-next-line jsx-a11y/anchor-is-valid
      (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("a", {
        onClick: () => onPinTask(id),
        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)("span", {
          className: `icon-star`,
          id: `pinTask-${id}`,
          "aria-label": `pinTask-${id}`
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 29,
          columnNumber: 13
        }, this)
      }, void 0, false, {
        fileName: _jsxFileName,
        lineNumber: 28,
        columnNumber: 11
      }, this)
    }, void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 25,
      columnNumber: 7
    }, this)]
  }, void 0, true, {
    fileName: _jsxFileName,
    lineNumber: 6,
    columnNumber: 5
  }, this);
}
_c = Task;
Task.propTypes = {
  /** Composition of the task */
  task: prop_types__WEBPACK_IMPORTED_MODULE_2___default().shape({
    /** Id of the task */
    id: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired,
    /** Title of the task */
    title: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired,
    /** Current state of the task */
    state: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().string).isRequired
  }),
  /** Event to change the task to archived */
  onArchiveTask: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func),
  /** Event to change the task to pinned */
  onPinTask: (prop_types__WEBPACK_IMPORTED_MODULE_2___default().func)
};
;
Task.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Task",
  "props": {
    "task": {
      "description": "Composition of the task",
      "type": {
        "name": "shape",
        "value": {
          "id": {
            "name": "string",
            "description": "Id of the task",
            "required": true
          },
          "title": {
            "name": "string",
            "description": "Title of the task",
            "required": true
          },
          "state": {
            "name": "string",
            "description": "Current state of the task",
            "required": true
          }
        }
      },
      "required": false
    },
    "onArchiveTask": {
      "description": "Event to change the task to archived",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "onPinTask": {
      "description": "Event to change the task to pinned",
      "type": {
        "name": "func"
      },
      "required": false
    }
  }
};
var _c;
__webpack_require__.$Refresh$.register(_c, "Task");

const $ReactRefreshModuleId$ = __webpack_require__.$Refresh$.moduleId;
const $ReactRefreshCurrentExports$ = __react_refresh_utils__.getModuleExports(
	$ReactRefreshModuleId$
);

function $ReactRefreshModuleRuntime$(exports) {
	if (true) {
		let errorOverlay;
		if (typeof __react_refresh_error_overlay__ !== 'undefined') {
			errorOverlay = __react_refresh_error_overlay__;
		}
		let testMode;
		if (typeof __react_refresh_test__ !== 'undefined') {
			testMode = __react_refresh_test__;
		}
		return __react_refresh_utils__.executeRuntime(
			exports,
			$ReactRefreshModuleId$,
			module.hot,
			errorOverlay,
			testMode
		);
	}
}

if (typeof Promise !== 'undefined' && $ReactRefreshCurrentExports$ instanceof Promise) {
	$ReactRefreshCurrentExports$.then($ReactRefreshModuleRuntime$);
} else {
	$ReactRefreshModuleRuntime$($ReactRefreshCurrentExports$);
}

/***/ })

});